// Generated by CoffeeScript 1.3.1
(function() {
  var addCouple, addDance, addJudge, calculateInter, calculateJudgeMarks, calculateMaxSums, couples, dances, generateInter, generateJudgeMarks, generateMarks, judges, marks, removeCouple, removeDance, removeJudge, sortJudgeMarks, validateMarks;

  couples = [];

  judges = [];

  dances = [];

  marks = [];

  $(function() {
    $('h1').click(function() {
      return $(this).hide('slow');
    });
    $('#coupleAdd').click(function() {
      return addCouple();
    });
    $('#coupleRemove').click(function() {
      return removeCouple();
    });
    $('#judgeAdd').click(function() {
      return addJudge();
    });
    $('#judgeRemove').click(function() {
      return removeJudge();
    });
    $('#danceAdd').click(function() {
      return addDance();
    });
    $('#danceRemove').click(function() {
      return removeDance();
    });
    $('#marksGen').click(function() {
      return generateMarks();
    });
    $('#interGen').click(function() {
      return generateInter();
    });
    return $('#judgeMarksGen').click(function() {
      return generateJudgeMarks();
    });
  });

  addCouple = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#coupleFields').append(newDivContent);
    couples.push({
      number: "",
      name: ""
    });
    thisIndex = couples.length - 1;
    $('#coupleFields .numberInput').last().focusout(function() {
      return couples[thisIndex].number = this.value;
    });
    return $('#coupleFields .nameInput').last().focusout(function() {
      return couples[thisIndex].name = this.value;
    });
  };

  removeCouple = function() {
    if (couples.length < 1) {
      return;
    }
    couples.pop();
    return $('#coupleFields div:last').remove();
  };

  addJudge = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#judgeFields').append(newDivContent);
    judges.push({
      number: "",
      name: ""
    });
    thisIndex = judges.length - 1;
    $('#judgeFields .numberInput').last().focusout(function() {
      return judges[thisIndex].number = this.value;
    });
    return $('#judgeFields .nameInput').last().focusout(function() {
      return judges[thisIndex].name = this.value;
    });
  };

  removeJudge = function() {
    if (judges.length < 1) {
      return;
    }
    judges.pop();
    return $('#judgeFields div:last').remove();
  };

  addDance = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#danceFields').append(newDivContent);
    dances.push({
      number: "",
      name: ""
    });
    thisIndex = dances.length - 1;
    $('#danceFields .numberInput').last().focusout(function() {
      return dances[thisIndex].number = this.value;
    });
    return $('#danceFields .nameInput').last().focusout(function() {
      return dances[thisIndex].name = this.value;
    });
  };

  removeDance = function() {
    if (dances.length < 1) {
      return;
    }
    dances.pop();
    return $('#danceFields div:last').remove();
  };

  generateMarks = function() {
    var couple, coupleIdx, dance, danceIdx, judge, newTable, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    if (couples.length < 1 || judges.length < 1 || dances.length < 1) {
      return;
    }
    $('#marks').empty();
    marks = [];
    for (_i = 0, _len = dances.length; _i < _len; _i++) {
      dance = dances[_i];
      marks.push([]);
      danceIdx = marks.length - 1;
      newTable = '<div><h3>' + dance.name + '</h3>';
      newTable += '<table><tr><th></th>';
      for (_j = 0, _len1 = judges.length; _j < _len1; _j++) {
        judge = judges[_j];
        newTable += '<th>' + judge.number + '</th>';
      }
      newTable += '</tr>';
      for (_k = 0, _len2 = couples.length; _k < _len2; _k++) {
        couple = couples[_k];
        marks[danceIdx].push([]);
        coupleIdx = marks[danceIdx].length - 1;
        newTable += '<tr><td>' + couple.number + '</td>';
        for (_l = 0, _len3 = judges.length; _l < _len3; _l++) {
          judge = judges[_l];
          marks[danceIdx][coupleIdx].push("");
          newTable += '<td><input type="text"></td>';
        }
      }
      newTable += '</table><br /></div>';
      $('#marks').append(newTable);
    }
    return $('#marks input').each(function(index) {
      return $(this).focusout(function() {
        var judgeIdx;
        judgeIdx = index % judges.length;
        coupleIdx = (Math.floor(index / judges.length)) % couples.length;
        danceIdx = Math.floor(index / (couples.length * judges.length));
        return marks[danceIdx][coupleIdx][judgeIdx] = this.value;
      });
    });
  };

  validateMarks = function() {
    var coupleIdx, dance, danceIdx, i, judgeIdx, lastCouple, lastJudge, m, mark, markTracker, _i, _j, _k, _l, _len, _len1;
    if (marks.length < 1 || marks[0].length < 1 || marks[0][0].length < 1) {
      return false;
    }
    for (danceIdx = _i = 0, _len = marks.length; _i < _len; danceIdx = ++_i) {
      dance = marks[danceIdx];
      lastCouple = dance.length - 1;
      lastJudge = dance[0].length - 1;
      for (judgeIdx = _j = 0; 0 <= lastJudge ? _j <= lastJudge : _j >= lastJudge; judgeIdx = 0 <= lastJudge ? ++_j : --_j) {
        markTracker = (function() {
          var _k, _results;
          _results = [];
          for (i = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; i = 0 <= lastCouple ? ++_k : --_k) {
            _results.push(false);
          }
          return _results;
        })();
        for (coupleIdx = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; coupleIdx = 0 <= lastCouple ? ++_k : --_k) {
          mark = parseInt(dance[coupleIdx][judgeIdx]);
          if (mark >= 1 && mark <= lastCouple + 1) {
            markTracker[mark - 1] = true;
          } else {
            return false;
          }
        }
        for (_l = 0, _len1 = markTracker.length; _l < _len1; _l++) {
          m = markTracker[_l];
          if (!m) {
            return false;
          }
        }
      }
    }
    return true;
  };

  calculateInter = function(maxSums) {
    var colIdx, currentPlace, dance, danceIdx, inter, lastCouple, lastDance, lastJudge, majority, rowIdx, _i, _j, _k, _len;
    majority = Math.floor(marks[0][0].length / 2) + 1;
    lastDance = marks.length - 1;
    lastCouple = marks[0].length - 1;
    lastJudge = marks[0][0].length - 1;
    currentPlace = 1;
    /*
      inter = []
      for dance, danceIdx in marks
        inter.push []
        for rowIdx in [0..lastCouple]
          inter[danceIdx].push []
          for colIdx in [0..lastCouple]
            inter[danceIdx][rowIdx].push 0
    */

    inter = [];
    for (danceIdx = _i = 0, _len = marks.length; _i < _len; danceIdx = ++_i) {
      dance = marks[danceIdx];
      inter.push([]);
      for (rowIdx = _j = 0; 0 <= lastCouple ? _j <= lastCouple : _j >= lastCouple; rowIdx = 0 <= lastCouple ? ++_j : --_j) {
        inter[danceIdx].push([]);
        for (colIdx = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; colIdx = 0 <= lastCouple ? ++_k : --_k) {
          inter[danceIdx][rowIdx].push("" + maxSums[danceIdx][colIdx][rowIdx].max + " (" + maxSums[danceIdx][colIdx][rowIdx].sum + ")");
        }
      }
    }
    return inter;
  };

  calculateMaxSums = function() {
    var couple, coupleIdx, dance, danceIdx, judgeIdx, lastCouple, mark, markIdx, maxSums, placeCounts, placeIdx, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _p, _q, _r;
    placeCounts = [];
    lastCouple = marks[0].length - 1;
    for (danceIdx = _i = 0, _len = marks.length; _i < _len; danceIdx = ++_i) {
      dance = marks[danceIdx];
      placeCounts.push([]);
      for (coupleIdx = _j = 0; 0 <= lastCouple ? _j <= lastCouple : _j >= lastCouple; coupleIdx = 0 <= lastCouple ? ++_j : --_j) {
        placeCounts[danceIdx].push([]);
        for (placeIdx = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; placeIdx = 0 <= lastCouple ? ++_k : --_k) {
          placeCounts[danceIdx][coupleIdx].push(0);
        }
      }
    }
    for (danceIdx = _l = 0, _len1 = marks.length; _l < _len1; danceIdx = ++_l) {
      dance = marks[danceIdx];
      for (coupleIdx = _m = 0, _len2 = dance.length; _m < _len2; coupleIdx = ++_m) {
        couple = dance[coupleIdx];
        for (judgeIdx = _n = 0, _len3 = couple.length; _n < _len3; judgeIdx = ++_n) {
          mark = couple[judgeIdx];
          markIdx = mark - 1;
          placeCounts[danceIdx][coupleIdx][markIdx]++;
        }
      }
    }
    maxSums = [];
    for (danceIdx = _o = 0, _len4 = marks.length; _o < _len4; danceIdx = ++_o) {
      dance = marks[danceIdx];
      maxSums.push([]);
      maxSums[danceIdx].push([]);
      for (coupleIdx = _p = 0; 0 <= lastCouple ? _p <= lastCouple : _p >= lastCouple; coupleIdx = 0 <= lastCouple ? ++_p : --_p) {
        maxSums[danceIdx][0].push({
          max: placeCounts[danceIdx][coupleIdx][0],
          sum: placeCounts[danceIdx][coupleIdx][0] * 1
        });
      }
      if (lastCouple > 0) {
        for (placeIdx = _q = 1; 1 <= lastCouple ? _q <= lastCouple : _q >= lastCouple; placeIdx = 1 <= lastCouple ? ++_q : --_q) {
          maxSums[danceIdx].push([]);
          for (coupleIdx = _r = 0; 0 <= lastCouple ? _r <= lastCouple : _r >= lastCouple; coupleIdx = 0 <= lastCouple ? ++_r : --_r) {
            maxSums[danceIdx][placeIdx].push({
              max: placeCounts[danceIdx][coupleIdx][placeIdx] + maxSums[danceIdx][placeIdx - 1][coupleIdx].max,
              sum: placeCounts[danceIdx][coupleIdx][placeIdx] * (placeIdx + 1) + maxSums[danceIdx][placeIdx - 1][coupleIdx].sum
            });
          }
        }
      }
    }
    return maxSums;
  };

  generateInter = function() {
    var colIdx, coupleIdx, dance, danceIdx, inter, interDiv, lastCouple, maxSums, rowIdx, _i, _j, _k, _l, _len, _results;
    if (!validateMarks()) {
      return;
    }
    maxSums = calculateMaxSums();
    inter = calculateInter(maxSums);
    $('#inter').empty();
    _results = [];
    for (danceIdx = _i = 0, _len = marks.length; _i < _len; danceIdx = ++_i) {
      dance = marks[danceIdx];
      lastCouple = dance.length - 1;
      interDiv = "<div>";
      interDiv += '<table><tr>';
      interDiv += '<th>1</th>';
      if (lastCouple >= 1) {
        for (coupleIdx = _j = 1; 1 <= lastCouple ? _j <= lastCouple : _j >= lastCouple; coupleIdx = 1 <= lastCouple ? ++_j : --_j) {
          interDiv += '<th>1-' + (coupleIdx + 1) + '</th>';
        }
      }
      interDiv += '<th>P</th></tr>';
      for (rowIdx = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; rowIdx = 0 <= lastCouple ? ++_k : --_k) {
        interDiv += '<tr>';
        for (colIdx = _l = 0; 0 <= lastCouple ? _l <= lastCouple : _l >= lastCouple; colIdx = 0 <= lastCouple ? ++_l : --_l) {
          interDiv += '<td>' + inter[danceIdx][rowIdx][colIdx] + '</td>';
        }
        interDiv += '<td>FIN</td></tr>';
      }
      interDiv += '</table><br /></div>';
      _results.push($('#inter').append(interDiv));
    }
    return _results;
  };

  calculateJudgeMarks = function() {
    var c, d, j, judgeMarks, markSum, numCouples, numDances, numJudges, _i, _j, _k, _ref, _ref1, _ref2;
    judgeMarks = [];
    numDances = marks.length;
    numCouples = marks[0].length;
    numJudges = marks[0][0].length;
    for (j = _i = 0, _ref = numJudges - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      judgeMarks[j] = [];
      for (c = _j = 0, _ref1 = numCouples - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
        markSum = 0;
        for (d = _k = 0, _ref2 = numDances - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; d = 0 <= _ref2 ? ++_k : --_k) {
          markSum += parseInt(marks[d][c][j]);
        }
        judgeMarks[j][c] = markSum;
      }
    }
    return judgeMarks;
  };

  sortJudgeMarks = function(judgeMarks) {
    var idx, judgeMark, sortedMarks, _i, _len;
    sortedMarks = [];
    for (idx = _i = 0, _len = judgeMarks.length; _i < _len; idx = ++_i) {
      judgeMark = judgeMarks[idx];
      sortedMarks.push({
        name: couples[idx].name,
        mark: judgeMark
      });
    }
    sortedMarks.sort(function(a, b) {
      if (a.mark < b.mark) {
        return -1;
      }
      if (a.mark > b.mark) {
        return 1;
      }
      return 0;
    });
    return sortedMarks;
  };

  generateJudgeMarks = function() {
    var couple, judge, judgeHtml, judgeIdx, judgeMarks, sortedCouples, _i, _j, _len, _len1, _results;
    if (!validateMarks()) {
      return;
    }
    judgeMarks = calculateJudgeMarks();
    $('#judgeMarks').empty();
    _results = [];
    for (judgeIdx = _i = 0, _len = judgeMarks.length; _i < _len; judgeIdx = ++_i) {
      judge = judgeMarks[judgeIdx];
      judgeHtml = "<table><tr><th></th><th>" + judges[judgeIdx].name + "</th></tr>";
      sortedCouples = sortJudgeMarks(judge);
      for (_j = 0, _len1 = sortedCouples.length; _j < _len1; _j++) {
        couple = sortedCouples[_j];
        judgeHtml += "<tr><td>" + couple.name + "</td><td>" + couple.mark + "</td></tr>";
      }
      judgeHtml += "</table>";
      _results.push($('#judgeMarks').append(judgeHtml));
    }
    return _results;
  };

}).call(this);

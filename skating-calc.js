// Generated by CoffeeScript 1.3.1
(function() {
  var addCouple, addDance, addJudge, couples, dances, generateInter, generateMarks, judges, marks, removeCouple, removeDance, removeJudge, validateMarks;

  couples = [];

  judges = [];

  dances = [];

  marks = [];

  $(function() {
    $('h1').click(function() {
      return $(this).hide('slow');
    });
    $('#coupleAdd').click(function() {
      return addCouple();
    });
    $('#coupleRemove').click(function() {
      return removeCouple();
    });
    $('#judgeAdd').click(function() {
      return addJudge();
    });
    $('#judgeRemove').click(function() {
      return removeJudge();
    });
    $('#danceAdd').click(function() {
      return addDance();
    });
    $('#danceRemove').click(function() {
      return removeDance();
    });
    $('#marksGen').click(function() {
      return generateMarks();
    });
    return $('#interGen').click(function() {
      return generateInter();
    });
  });

  addCouple = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#coupleFields').append(newDivContent);
    couples.push({
      number: "",
      name: ""
    });
    thisIndex = couples.length - 1;
    $('#coupleFields .numberInput').last().focusout(function() {
      return couples[thisIndex].number = this.value;
    });
    return $('#coupleFields .nameInput').last().focusout(function() {
      return couples[thisIndex].name = this.value;
    });
  };

  removeCouple = function() {
    if (couples.length < 1) {
      return;
    }
    couples.pop();
    return $('#coupleFields div:last').remove();
  };

  addJudge = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#judgeFields').append(newDivContent);
    judges.push({
      number: "",
      name: ""
    });
    thisIndex = judges.length - 1;
    $('#judgeFields .numberInput').last().focusout(function() {
      return judges[thisIndex].number = this.value;
    });
    return $('#judgeFields .nameInput').last().focusout(function() {
      return judges[thisIndex].name = this.value;
    });
  };

  removeJudge = function() {
    if (judges.length < 1) {
      return;
    }
    judges.pop();
    return $('#judgeFields div:last').remove();
  };

  addDance = function() {
    var newDivContent, thisIndex;
    newDivContent = '<div><input type="text" class="numberInput">';
    newDivContent += '<input type="text" class="nameInput">';
    newDivContent += '<br /></div>';
    $('#danceFields').append(newDivContent);
    dances.push({
      number: "",
      name: ""
    });
    thisIndex = dances.length - 1;
    $('#danceFields .numberInput').last().focusout(function() {
      return dances[thisIndex].number = this.value;
    });
    return $('#danceFields .nameInput').last().focusout(function() {
      return dances[thisIndex].name = this.value;
    });
  };

  removeDance = function() {
    if (dances.length < 1) {
      return;
    }
    dances.pop();
    return $('#danceFields div:last').remove();
  };

  generateMarks = function() {
    var couple, coupleIdx, dance, danceIdx, judge, newTable, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    if (couples.length < 1 || judges.length < 1 || dances.length < 1) {
      return;
    }
    $('#marks').empty();
    marks = [];
    for (_i = 0, _len = dances.length; _i < _len; _i++) {
      dance = dances[_i];
      marks.push([]);
      danceIdx = marks.length - 1;
      newTable = '<div><h3>' + dance.name + '</h3>';
      newTable += '<table><tr><th></th>';
      for (_j = 0, _len1 = judges.length; _j < _len1; _j++) {
        judge = judges[_j];
        newTable += '<th>' + judge.number + '</th>';
      }
      newTable += '</tr>';
      for (_k = 0, _len2 = couples.length; _k < _len2; _k++) {
        couple = couples[_k];
        marks[danceIdx].push([]);
        coupleIdx = marks[danceIdx].length - 1;
        newTable += '<tr><td>' + couple.number + '</td>';
        for (_l = 0, _len3 = judges.length; _l < _len3; _l++) {
          judge = judges[_l];
          marks[danceIdx][coupleIdx].push("");
          newTable += '<td><input type="text"></td>';
        }
      }
      newTable += '<br /></div>';
      $('#marks').append(newTable);
    }
    return $('#marks input').each(function(index) {
      return $(this).focusout(function() {
        var judgeIdx;
        judgeIdx = index % judges.length;
        coupleIdx = (Math.floor(index / judges.length)) % couples.length;
        danceIdx = Math.floor(index / (couples.length * judges.length));
        return marks[danceIdx][coupleIdx][judgeIdx] = this.value;
      });
    });
  };

  validateMarks = function() {
    var coupleIdx, dance, danceIdx, i, judgeIdx, lastCouple, lastJudge, m, mark, markTracker, _i, _j, _k, _l, _len, _len1;
    for (danceIdx = _i = 0, _len = marks.length; _i < _len; danceIdx = ++_i) {
      dance = marks[danceIdx];
      lastCouple = dance.length - 1;
      lastJudge = dance[0].length - 1;
      for (judgeIdx = _j = 0; 0 <= lastJudge ? _j <= lastJudge : _j >= lastJudge; judgeIdx = 0 <= lastJudge ? ++_j : --_j) {
        markTracker = (function() {
          var _k, _results;
          _results = [];
          for (i = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; i = 0 <= lastCouple ? ++_k : --_k) {
            _results.push(false);
          }
          return _results;
        })();
        for (coupleIdx = _k = 0; 0 <= lastCouple ? _k <= lastCouple : _k >= lastCouple; coupleIdx = 0 <= lastCouple ? ++_k : --_k) {
          mark = parseInt(dance[coupleIdx][judgeIdx]);
          if (mark >= 1 && mark <= lastCouple + 1) {
            markTracker[mark - 1] = true;
          } else {
            return false;
          }
        }
        for (_l = 0, _len1 = markTracker.length; _l < _len1; _l++) {
          m = markTracker[_l];
          if (!m) {
            return false;
          }
        }
      }
    }
    return true;
  };

  generateInter = function() {
    if (!validateMarks()) {
      return;
    }
    return console.log('validated');
  };

}).call(this);
